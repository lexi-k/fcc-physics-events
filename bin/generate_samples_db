#!./.venv/Scripts/python
"""
(Re)Generate FCC samples database.
Requires augments file and dirac transformations file.
"""

import argparse
import json
import os
import sys
import tarfile
from typing import Any


def load_transf(transf_path: str) -> Any:
    """
    Load Dirac transformations info.
    """
    try:
        with tarfile.open(transf_path, "r:gz") as intarfile:
            for member in intarfile.getmembers():
                if not member.name.endswith(".json"):
                    continue
                infile = intarfile.extractfile(member)
                if infile is not None:
                    return json.load(infile)
    except tarfile.ReadError:
        print('Error: Provided transformations file is not of type ".tar.gz"!')
        print("       Aborting...")
        sys.exit(1)
    except json.decoder.JSONDecodeError:
        print("ERROR: The Dirac transformations file is not valid JSON!")
        print("       Aborting...")
        sys.exit(1)

    return None


def load_augments(augments_path: str) -> Any:
    """
    Load sample augments.
    """

    try:
        with open(augments_path, "r", encoding="utf-8") as infile:
            json_text = ""
            for line in infile:
                if line.startswith("#"):
                    continue
                json_text += line
            return json.loads(json_text)
    except json.decoder.JSONDecodeError:
        print("ERROR: The augments file is not valid JSON!")
        print("       Aborting...")
        sys.exit(1)

    return None


def run(transf_path: str, augments_path: str, db_path: str, verbose: bool = False):
    """
    Compare the transformations and augments and create samples db.
    """
    transf_info = load_transf(transf_path)
    if transf_info is None:
        print("Error: Can't load transformations information from the provided file!")
        print("       Aborting...")
        sys.exit(1)

    augments_info = load_augments(augments_path)
    if augments_info is None:
        print("Error: Can't load augments info from the provided file!")
        print("       Aborting...")
        sys.exit(1)

    sample_db = {}
    sample_db["last_update"] = transf_info["last_file_update"]
    sample_db["samples"] = {}

    for transf_id, transformation in transf_info["transformations"].items():
        if transf_id not in augments_info["augments"].keys():
            if verbose:
                print(f"Warning: Augments file does not contain sample {transf_id}!")
            continue

        augment = {}
        if transf_id in augments_info["augments"].keys():
            augment = augments_info["augments"][transf_id]

        sample = {}

        # Status
        sample["status"] = transformation["Status"].lower()

        # Name
        if "name" in augment:
            sample["name"] = augment["name"]
        else:
            sample["name"] = "Not assigned"

        # Cross-section
        if "cross-section" in augment:
            sample["cross-section"] = augment["cross-section"]
        elif "cross-section" in transformation:
            sample["cross-section"] = transformation["cross-section"]
        else:
            sample["cross-section"] = "Unknown"
        # Sometimes transformation info contains null, 0 or empty string
        if sample["cross-section"] is None:
            sample["cross-section"] = "Unknown"
        try:
            if float(str(sample["cross-section"])) == 0.0:
                sample["cross-section"] = "Unknown"
        except ValueError:
            sample["cross-section"] = "Unknown"
        if sample["cross-section"] == "":
            sample["cross-section"] = "Unknown"

        # Cross-section error
        if "cross-section-error" in augment:
            sample["cross-section-error"] = augment["cross-section-error"]
        elif "cross-section-error" in transformation:
            sample["cross-section-error"] = transformation["cross-section-error"]
        else:
            sample["cross-section-error"] = "Unknown"
        # Sometimes transformation info contains null or empty string
        if sample["cross-section-error"] == "":
            sample["cross-section-error"] = "Unknown"
        if sample["cross-section-error"] is None:
            sample["cross-section-error"] = "Unknown"

        # Efficiency
        if "efficiency" in augment:
            sample["efficiency"] = augment["efficiency"]
        else:
            sample["efficiency"] = 1.0

        # Efficiency info
        if "efficiency-info" in augment:
            sample["efficiency-info"] = augment["efficiency-info"]
        elif "efficiency-info" in transformation:
            sample["efficiency-info"] = transformation["efficiency-info"]
        else:
            sample["efficiency-info"] = ""
        # Some samples have FIXME string
        if sample["efficiency-info"] is None:
            sample["efficiency-info"] = ""
        if "FIXME:" in sample["efficiency-info"]:
            sample["efficiency-info"] = ""

        # Total sum of weights
        if "total-sum-of-weights" in transformation:
            sample["total-sum-of-weights"] = transformation["total-sum-of-weights"]
        else:
            sample["total-sum-of-weights"] = "Unknown"

        # Total number of events
        if "total-number-of-events" in transformation:
            sample["total-number-of-events"] = transformation["total-number-of-events"]
        else:
            sample["total-number-of-events"] = "Unknown"

        # Number of events per file
        if "number-of-events-per-file" in transformation:
            sample["number-of-events-per-file"] = transformation[
                "number-of-events-per-file"
            ]
        else:
            sample["number-of-events-per-file"] = "Unknown"

        # Paths
        if "path" in transformation:
            if isinstance(transformation["path"], str):
                sample["paths"] = [transformation["path"]]
            else:
                sample["paths"] = transformation["path"]
        else:
            sample["paths"] = []

        # Production manager
        if "production-manager" in transformation:
            cn = transformation["production-manager"].split("/")[7]
            name = cn.split("=")[1]
            sample["production-manager"] = name
        else:
            sample["production-manager"] = "Unknown"

        sample_db["samples"][transf_id] = sample

    with open(db_path, "w", encoding="utf-8") as dbfile:
        json.dump(sample_db, dbfile)


def main():
    """
    Entry point
    """
    parser = argparse.ArgumentParser(
        prog="generate_samples_db", description="(Re)Generate FCC samples database"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Make console output more verbose"
    )
    parser.add_argument(
        "-t",
        "--transf",
        type=str,
        required=True,
        help="Location for the Dirac transformations file",
    )
    parser.add_argument(
        "-a",
        "--augments",
        type=str,
        required=True,
        help="Location of the augments file",
    )
    parser.add_argument(
        "-o",
        "--db",
        type=str,
        required=True,
        help="Location of the output database file",
    )
    args = parser.parse_args()

    if not os.path.isfile(args.transf):
        print("Error: Provided Dirac transformations file notfound!")
        print("       Aborting...")
        return sys.exit(1)

    if not os.path.isfile(args.augments):
        print("Error: Provided augments file not found!")
        print("       Aborting...")
        return sys.exit(1)

    run(args.transf, args.augments, args.db, args.verbose)

    return sys.exit(0)


if __name__ == "__main__":
    main()
